#include <iostream>

//  Definition for a binary tree node.
 struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode() : val(0), left(nullptr), right(nullptr) {}
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 };

// Given the root of a binary tree, return the sum of values of its deepest leaves.
class Solution {
public:
    int deepestLeavesSum(TreeNode* root) {
        int d = getMaxDepth(root, 0);
        return deepestLeavesSumRecursive(root,d,0);
    }

    int getMaxDepth(TreeNode* root, int current) {
        if (root->right == nullptr && root->left == nullptr)
            return current;

        int right = 0;
        int left = 0;

        if (root->right != nullptr)
            right = getMaxDepth(root->right, current + 1);

        if (root->left != nullptr)
            left = getMaxDepth(root->left, current + 1);

        return (right > left ? right : left);
    }

    int deepestLeavesSumRecursive(TreeNode* root, int maxDepth, int currentDepth) {
        if(root == nullptr)
            return 0;

        if (currentDepth == maxDepth && root->left == nullptr && root->right == nullptr)
            return root->val;

        return deepestLeavesSumRecursive(root->right, maxDepth, currentDepth + 1) +
                deepestLeavesSumRecursive(root->left, maxDepth, currentDepth + 1);
    }
};
int main() {

    auto* tree = new TreeNode(1, new TreeNode(3), new TreeNode(6));
    auto* s = new Solution();

    s->deepestLeavesSum(tree);
    delete s;
    delete tree;

    return 0;
}
