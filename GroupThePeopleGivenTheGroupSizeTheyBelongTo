# There are n people that are split into some unknown number of groups.
# Each person is labeled with a unique ID from 0 to n - 1.
# 
# You are given an integer array groupSizes, where groupSizes[i] is the size of the group that person i is in.
# For example, if groupSizes[1] = 3, then person 1 must be in a group of size 3.
# 
# Return a list of groups such that each person i is in a group of size groupSizes[i].
# 
# Each person should appear in exactly one group, and every person must be in a group.
# If there are multiple answers, return any of them.
# It is guaranteed that there will be at least one valid solution for the given input.
class Solution(object):
    def groupThePeople(self, groupSizes):
        """
        :type groupSizes: List[int]
        :rtype: List[List[int]]
        """
        map = {}
        answer = []
        current_num = 0

        for size in groupSizes:
            if map.keys().__contains__(size):
                map[size].append(current_num)
            else:
                map[size] = [current_num]
            current_num = current_num + 1

        current_list = []
        for key in map.keys():
            for x in map[key]:
                current_list.append(x)
                if len(current_list) is key:
                    answer.append(current_list)
                    current_list = []

        return answer


if __name__ == '__main__':
    s = Solution()
    print(s.groupThePeople([3, 3, 3, 3, 3, 1, 3]))
