# Given an array nums with n objects colored red, white, or blue,
# sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.
# We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.
# You must solve this problem without using the library's sort function.
class Solution(object):
    def sortColors(self, nums):
        """
        :type nums: List[int]
        :rtype: None Do not return anything, modify nums in-place instead.
        """
        n = len(nums)
        zeroStart = 0
        twoStart = n - 1
        
        i = 0
        while i != n and i <= twoStart:
            print(nums)
            if nums[i] == 0:
                self.swapWithPrev(nums, i, zeroStart)
                zeroStart += 1
            elif nums[i] == 2:
                self.swapWithPrev(nums, i, twoStart)
                twoStart -= 1
                continue
            i += 1
        
    def swapWithPrev(self, num, i, j):
        temp = num[i]
        num[i] = num[j]
        num[j] = temp
