#include <iostream>

struct ListNode {
 int val;
 ListNode *next;
 ListNode() : val(0), next(nullptr) {}
 ListNode(int x) : val(x), next(nullptr) {}
 ListNode(int x, ListNode *next) : val(x), next(next) {}
};

// Given the head of a linked list, rotate the list to the right by k places.
class Solution {
public:
    int getListSize(ListNode* head) {
        int counter = 1;
        while(head->next != nullptr) {
            counter++;
            head = head->next;
        }

        return counter;
    }

    ListNode* rotateRight(ListNode* head, int k) {
        if(head == nullptr || head->next == nullptr)
            return head;
        int length = getListSize(head);

        k = k % length;

        if(k == 0)
            return head;

        ListNode* current = head;
        ListNode* prev = nullptr;
        for(int i = 0; i < length - k; i++) {
            prev = current;
            current = current->next;
        }

        ListNode* newHead = current;

        while(current->next != nullptr) {
            current = current->next;
        }
        current->next = head;
        prev->next = nullptr;
        return newHead;
    }
};
int main() {

    auto* list = new ListNode(1, new ListNode(2, new ListNode(3, new ListNode(4, new ListNode(5)))));
    auto* s = new Solution();
    s->rotateRight(list, 2);
    
    delete s;
    delete list;

    return 0;
}
