public class ListNode {
    int val;
    ListNode next;
    ListNode() {}
    ListNode(int val) { this.val = val; }
    ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 }

/*
 * Given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.
 * Return the linked list sorted as well.
 */
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        if(head == null || head.next == null)
            return head;
        
        // new head with outside of range val
        ListNode newHead = new ListNode(-150, head);
        ListNode current = newHead;
        
        while(current.next != null && current.next.next != null){
            if(current.next.val == current.next.next.val){
                int val = current.next.val;
                    while(current.next != null && current.next.val == val){
                        current.next = current.next.next;
                    }
            }
            else
                current=current.next;
        }
        return newHead.next;
    }
}

int main(){
  return 0;
}
