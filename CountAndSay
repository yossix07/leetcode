# The count-and-say sequence is a sequence of digit strings defined by the recursive formula:
# countAndSay(1) = "1"
# countAndSay(n) is the way you would "say" the digit string from countAndSay(n-1),
# which is then converted into a different digit string.
# To determine how you "say" a digit string, split it into the minimal number of substrings 
# such that each substring contains exactly one unique digit. Then for each substring,
# say the number of digits, then say the digit. Finally, concatenate every said digit.
class Solution(object):
    def countAndSay(self, n):
        """
        :type n: int
        :rtype: str
        """
        if n == 1:
            return "1"

        if n == 2:
            return "11"

        prevRecursive = self.countAndSay(n - 1)
        res = ""

        currentCount = 1
        prevRecursiveLength = len(prevRecursive)
        prev = prevRecursive[0]
        i = 1

        while i < prevRecursiveLength:
            if prev == prevRecursive[i]:
                currentCount += 1

            else:
                res += str(currentCount)
                res += str(prev)
                prev = prevRecursive[i]
                currentCount = 1
            i += 1


        res += str(currentCount)
        res += str(prev)
        return res


if __name__ == '__main__':
    s = Solution()
    print(s.countAndSay(4))
