class ListNode(object):
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


# You are given the head of a linked list, which contains a series of integers separated by 0's.
# The beginning and end of the linked list will have Node.val == 0. For every two consecutive 0's,
# merge all the nodes lying in between them into a single node whose value is the sum of all the merged nodes.
# The modified list should not contain any 0's.
# Return the head of the modified linked list.
def mergeNodes(head):
    if head is not None and head.next == None:
        return None
    head = head.next
    ret = ListNode()
    current = ret
    currentVal = 0
    while (True):
        if (head.val == 0):
            current.val = currentVal
            if head.next is None:
                break
            next = ListNode()
            current.next = next
            current = current.next
            currentVal = 0
        else:
            currentVal += head.val
        head = head.next

    return ret


if __name__ == '__main__':
    # [0,3,1,0,4,5,2,0]
    a = ListNode(0,ListNode(3,ListNode(1,ListNode(0,ListNode(4,ListNode(5,ListNode(2,ListNode(2,None))))))))
    mergeNodes(a)
