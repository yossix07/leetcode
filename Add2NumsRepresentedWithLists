Definition for singly-linked list.
struct ListNode {
int val;
ListNode *next;
ListNode() : val(0), next(nullptr) {}
ListNode(int x) : val(x), next(nullptr) {}
ListNode(int x, ListNode *next) : val(x), next(next) {}
};


/*
* You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. 
* Add the two numbers and return the sum as a linked list.
*/
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
    int carry = 0, temp;
    ListNode* head = new ListNode();
    ListNode* current = head;
    bool first = true;
    while(true){
        temp = carry;
        if(l1){
            temp += l1->val;
            l1 = l1->next;
        }
           
        if(l2){
            temp += l2->val;
            l2 = l2->next;
        }
        if(temp >= 10) {
            carry = 1;
            temp %= 10;
        } else {
            carry = 0;
        }
        current->val = temp;
        current->next = nullptr;
        
        if(l1 == nullptr && l2 == nullptr && carry == 0)
            break;
        current->next = new ListNode();
        current = current->next;
    }
    return head;
    }
};

int main() {
    // can add a test
    return 0;
}
